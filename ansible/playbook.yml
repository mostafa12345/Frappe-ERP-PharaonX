---
- name: Setup and Deploy Application
  hosts: web_servers
  become: yes

  tasks:
    # Check if Docker is installed
    - name: Check if Docker is installed
      shell: docker --version
      register: docker_installed
      failed_when: false
      changed_when: false

    # Check if Docker Compose is installed
    - name: Check if Docker Compose is installed
      shell: docker-compose --version
      register: docker_compose_installed
      failed_when: false
      changed_when: false

    # Install Docker if not installed
    - name: Install Docker
      apt:
        name: docker-ce
        state: present
      when: docker_installed.rc != 0

    # Install Docker Compose if not installed
    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      when: docker_compose_installed.rc != 0

    # Update the package list
    - name: Update apt package list
      apt:
        update_cache: yes

    # Install prerequisites
    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    # Ensure Docker keyrings directory exists
    - name: Ensure Docker keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # Add Docker's GPG key if not already added
    - name: Check if Docker GPG key exists
      stat:
        path: /etc/apt/keyrings/docker.gpg
      register: docker_gpg_key

    - name: Add Docker's GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.gpg
        mode: '0644'
      when: not docker_gpg_key.stat.exists

    # Check if Docker repository is already configured
    - name: Check if Docker repository is configured
      command: grep -q "https://download.docker.com/linux/ubuntu" /etc/apt/sources.list.d/docker.list
      register: docker_repo_check
      failed_when: false

    - name: Get Ubuntu codename
      command: lsb_release -cs
      register: ubuntu_codename
    # Add Docker repository only if not already configured
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ubuntu_codename.stdout }} stable"
        state: present
      when: docker_repo_check.rc != 0

    # Start Docker service
    - name: Start Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    # Add user to the Docker group
    - name: Add current user to the Docker group
      user:
        name: "{{ ansible_user }}"  # Dynamically adds the user from inventory
        groups: docker
        append: yes

    # Restart Docker service to apply group changes
    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted

    # Create application directory only if it doesn't exist
    - name: Create application directory only if it doesn't exist
      file:
        path: ~/frappe-docker  # Uses the home directory of the inventory user
        state: directory
        mode: '0755'

    # Copy application files from Jenkins workspace
    - name: Copy docker-compose file
      copy:
        src: "/var/jenkins_home/workspace/ERP-NEXT_main/docker-compose.yml"
        dest: ~/frappe-docker/docker-compose.yml
        mode: '0644'

    - name: Copy nginx configuration
      copy:
        src: ./nginx.conf
        dest: ~/frappe-docker/nginx.conf
        mode: '0644'

    # Check if the cert-data directory exists
    - name: Check if cert-data directory exists
      stat:
        path: ~/frappe-docker/cert-data
      register: cert_data_dir

    # Create cert-data directory if it does not exist
    - name: Create cert-data directory
      file:
        path: ~/frappe-docker/cert-data
        state: directory
        mode: '0755'
      when: not cert_data_dir.stat.exists

    # Check if SSL certificate exists
    - name: Check if SSL certificate exists
      stat:
        path: ~/frappe-docker/cert-data/localhost.crt
      register: ssl_cert

    # Generate self-signed SSL certificate if it does not exist
    - name: Generate self-signed SSL certificate
      command: >
        openssl req -x509 -newkey rsa:2048 -nodes
        -keyout ~/frappe-docker/cert-data/localhost.key
        -out ~/frappe-docker/cert-data/localhost.crt
        -days 365
        -subj "/CN=localhost"
      when: not ssl_cert.stat.exists

    # Run Docker Compose to start the application
    - name: Deploy application using Docker Compose
      command: docker-compose up -d
      args:
        chdir: ~/frappe-docker
